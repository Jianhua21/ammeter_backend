<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.kashuo.kcp.dao.AmmeterNetworkMapper" >
  <resultMap id="BaseResultMap" type="com.kashuo.kcp.domain.AmmeterNetwork" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="ammeter_id" property="ammeterId" jdbcType="INTEGER" />
    <result column="rssi" property="rssi" jdbcType="VARCHAR" />
    <result column="rsrq" property="rsrq" jdbcType="VARCHAR" />
    <result column="celli" property="celli" jdbcType="VARCHAR" />
    <result column="record_hour" property="recordHour" jdbcType="INTEGER" />
    <result column="record_day" property="recordDay" jdbcType="VARCHAR" />
    <result column="created_time" property="createdTime" jdbcType="TIMESTAMP" />
    <result column="warning_flag" property="warningFlag" jdbcType="INTEGER" />
  </resultMap>

  <resultMap id="BaseInfoResultMap" type="com.kashuo.kcp.domain.AmmeterNetwork" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="ammeter_id" property="ammeterId" jdbcType="INTEGER" />
    <result column="rssi" property="rssi" jdbcType="VARCHAR" />
    <result column="rsrq" property="rsrq" jdbcType="VARCHAR" />
    <result column="celli" property="celli" jdbcType="VARCHAR" />
    <result column="record_hour" property="recordHour" jdbcType="INTEGER" />
    <result column="record_day" property="recordDay" jdbcType="VARCHAR" />
    <result column="created_time" property="createdTime" jdbcType="TIMESTAMP" />
    <result column="warning_flag" property="warningFlag" jdbcType="INTEGER" />
    <result column="status" property="status"  jdbcType="INTEGER" />
    <result column="device_id" property="deviceId"  jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, ammeter_id, rssi, rsrq, celli, record_hour, record_day, created_time,warning_flag
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from ammeter_network
    where id = #{id,jdbcType=INTEGER}
  </select>

  <select id="selectForWarningReport" resultMap="BaseResultMap">
    select b.id, b.ammeter_id, b.rssi, b.rsrq, b.celli, b.record_hour, b.record_day, b.created_time,b.warning_flag
    from ammeter_position p
    INNER JOIN ammeter_device d on p.imei = d.imsi
    INNER join (select n.* from
    ammeter_network n,(select max(id) id
    from ammeter_network group by ammeter_id) c  where  n.id = c.id) b
    on d.id = b.ammeter_id
    where p.`status` in (1,6,7)
    and d.rsrp_warning > 2
    and not exists(
    select * from ammeter_warning w where w.ammeter_id = d.id and w.warning_type=0 and w.warning_status =0
    )
  </select>

  <select id="selectOfflineDevice" resultMap="BaseInfoResultMap">
    select b.id, d.id as ammeter_id, b.rssi, b.rsrq, b.celli, b.record_hour, b.record_day, b.created_time,b.warning_flag,p.status,
    p.device_id
    from ammeter_position p
    INNER JOIN ammeter_device d on p.imei = d.imsi
    LEFT join (select n.* from
    ammeter_network n,(select max(id) id
    from ammeter_network group by ammeter_id) c  where  n.id = c.id) b
    on d.id = b.ammeter_id
    where p.`status` in(1,6,7) and p.device_id is not null
     and (TIMESTAMPDIFF(HOUR,b.created_time,NOW())>= 1 or b.created_time is null)
and not EXISTS(select * from ammeter_warning w where w.ammeter_id = d.id and w.warning_type=1
and w.warning_status =0)
  </select>

  <select id="selectOnlineDeviceWithWarning" resultMap="BaseInfoResultMap">
    select b.id, d.id as ammeter_id, b.rssi, b.rsrq, b.celli, b.record_hour, b.record_day, b.created_time,b.warning_flag,p.status,
    p.device_id
    from ammeter_position p
    INNER JOIN ammeter_device d on p.imei = d.imsi
    LEFT join (select n.* from
    ammeter_network n,(select max(id) id
    from ammeter_network group by ammeter_id) c  where  n.id = c.id) b
    on d.id = b.ammeter_id
    where p.`status` in(1,7) and p.device_id is not null
    <![CDATA[
    and TIMESTAMPDIFF(HOUR,b.created_time,NOW()) <1
    ]]>
    and  EXISTS(select * from ammeter_warning w where w.ammeter_id = d.id and w.warning_type=1
    and w.warning_status =0)
  </select>

  <select id="selectByAmmeterId" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select
    <include refid="Base_Column_List" />
    from ammeter_network
    where ammeter_id = #{id,jdbcType=INTEGER}
      order by id desc limit 1
  </select>
    <select id="queryNetWorkParams" resultMap="BaseResultMap"
            parameterType="com.kashuo.kcp.domain.AmmeterNetwork">
        select
        <include refid="Base_Column_List" />
        from ammeter_network
        where ammeter_id = #{ammeterId,jdbcType=INTEGER}
        <if test="recordHour != null">
            and record_hour = #{recordHour}
        </if>
        <if test="recordDay != null and recordDay !=''">
            and record_day = #{recordDay}
        </if>
    </select>
<select id="networkList" parameterType="com.kashuo.kcp.dao.condition.AmmeterNetWorkCondition"
resultType="com.kashuo.kcp.domain.AmmeterNetWorkResult">
    select a.imsi,p.name, p.id,b.celli,b.rsrq,b.rssi,b.rsrp,b.created_time  from ammeter_device a
     INNER join ammeter_position p on a.imsi = p.imei
    left join
    (select b1.* from ammeter_network b1 ,
    (select max(id) id from ammeter_network group by ammeter_id) c
    where b1.id =c.id) b
    on  a.id = b.ammeter_id
where p.status !=3
<if test="imsi != null and imsi !=''">
    and a.imsi like CONCAT('%',#{imsi,jdbcType=VARCHAR},'%')
</if>
order by b.created_time desc
</select>

  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from ammeter_network
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.kashuo.kcp.domain.AmmeterNetwork" >
    <selectKey resultType="java.lang.Integer" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into ammeter_network (ammeter_id, rssi, rsrq, rsrp,
      celli, record_hour, record_day, 
      created_time)
    values (#{ammeterId,jdbcType=INTEGER}, #{rssi,jdbcType=VARCHAR}, #{rsrq,jdbcType=VARCHAR}, #{rsrp,jdbcType=VARCHAR},
      #{celli,jdbcType=VARCHAR}, #{recordHour,jdbcType=INTEGER}, #{recordDay,jdbcType=VARCHAR}, 
      #{createdTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.kashuo.kcp.domain.AmmeterNetwork" >
    <selectKey resultType="java.lang.Integer" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into ammeter_network
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="ammeterId != null" >
        ammeter_id,
      </if>
      <if test="rssi != null" >
        rssi,
      </if>
      <if test="rsrq != null" >
        rsrq,
      </if>
      <if test="celli != null" >
        celli,
      </if>
      <if test="recordHour != null" >
        record_hour,
      </if>
      <if test="recordDay != null" >
        record_day,
      </if>
      <if test="createdTime != null" >
        created_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="ammeterId != null" >
        #{ammeterId,jdbcType=INTEGER},
      </if>
      <if test="rssi != null" >
        #{rssi,jdbcType=VARCHAR},
      </if>
      <if test="rsrq != null" >
        #{rsrq,jdbcType=VARCHAR},
      </if>
      <if test="celli != null" >
        #{celli,jdbcType=VARCHAR},
      </if>
      <if test="recordHour != null" >
        #{recordHour,jdbcType=INTEGER},
      </if>
      <if test="recordDay != null" >
        #{recordDay,jdbcType=VARCHAR},
      </if>
      <if test="createdTime != null" >
        #{createdTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.kashuo.kcp.domain.AmmeterNetwork" >
    update ammeter_network
    <set >
      <if test="ammeterId != null" >
        ammeter_id = #{ammeterId,jdbcType=INTEGER},
      </if>
      <if test="rssi != null" >
        rssi = #{rssi,jdbcType=VARCHAR},
      </if>
      <if test="rsrq != null" >
        rsrq = #{rsrq,jdbcType=VARCHAR},
      </if>
      <if test="rsrp != null" >
        rsrp = #{rsrp,jdbcType=VARCHAR},
      </if>
      <if test="celli != null" >
        celli = #{celli,jdbcType=VARCHAR},
      </if>
      <if test="recordHour != null" >
        record_hour = #{recordHour,jdbcType=INTEGER},
      </if>
      <if test="recordDay != null" >
        record_day = #{recordDay,jdbcType=VARCHAR},
      </if>
      <if test="createdTime != null" >
        created_time = #{createdTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.kashuo.kcp.domain.AmmeterNetwork" >
    update ammeter_network
    set ammeter_id = #{ammeterId,jdbcType=INTEGER},
      rssi = #{rssi,jdbcType=VARCHAR},
      rsrq = #{rsrq,jdbcType=VARCHAR},
      celli = #{celli,jdbcType=VARCHAR},
      record_hour = #{recordHour,jdbcType=INTEGER},
      record_day = #{recordDay,jdbcType=VARCHAR},
      created_time = #{createdTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <update id="updateStatusByPrimaryKey" parameterType="java.lang.Integer">
    update ammeter_network
    set warning_flag = 1
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>